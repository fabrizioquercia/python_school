    """In questo esercizio, dovrai implementare un sistema avanzato di gestione delle emergenze ospedaliere utilizzando una pila con priorità. Il sistema dovrà essere in grado di gestire i pazienti che arrivano al pronto soccorso in base alla gravità della loro condizione e all’ordine di arrivo.
    Ogni paziente ha un nome, una priorità medica e il tempo di arrivo. I pazienti con condizioni più gravi devono essere trattati prima, mentre quelli con stessa priorità vengono trattati in ordine di arrivo (FIFO per le stesse priorità). Classificazione delle priorità:
    • Codice Rosso (1): Emergenza critica, trattamento immediato.
    • Codice Giallo (2): Urgenza alta, richiede attenzione rapida.
    • Codice Verde (3): Caso moderato, può aspettare.
    • Codice Bianco (4): Non urgente, trattamento opzionale.
    Funzionalità richieste:
    • Registrazione di un nuovo paziente, Inserimento nella coda in base alla priorità .
    - Trattamento di un paziente, rimuovendolo dalla pila .
    • Visualizzazione della lista di pazienti in attesa, ordinata per priorità
    Gestione del tempo di attesa: se un paziente aspetta da più di un ora , la sua priorità deve aumenta di uno.
    """
    from datetime import datetime,timedelta

    class Paziente:
        def __init__(self, nome, codice,ora):
            self.nome = nome
            self.codice = codice

            self.tempo_arrivo = ora


        def __str__(self):
            return f"{self.nome} (Codice: {self.codice}) è arrivato alle {self.tempo_arrivo} del {self.data_arrivo}."

    class Pila:
            def __init__(self):
                    self.lista=[]


            def registrazione(self, nome, codice,ora):
             nuovo = Paziente(nome, codice,ora)

            # Trova la posizione giusta per inserirlo in base alla priorità
            i = 0
            while i < len(self.lista) and self.lista[i].codice <= codice:
                i += 1
            self.lista.insert(i, nuovo)

            print(f"Paziente {nome} registrato con codice {codice}.")


            def tratta_paziente(self):
             if not self.lista:
                print("Nessun paziente in attesa.")
                return
            paziente = self.lista.pop(0)
            print(f"Trattato: {paziente}")

          def visualizza_pazienti(self):
            if not self.lista:
                print("Nessun paziente in attesa.")
            else:
                print("Pazienti in attesa:")
                for p in self.lista:
                    print(f"- {p}")


        def gestione_tempo(self):
           orario_corrente = datetime.now()
           for p in self.lista:
            # Converti la stringa tempo_arrivo in oggetto datetime
            tempo_arrivo = datetime.strptime(p.tempo_arrivo, "%H:%M")

            # Ricrea datetime completo (solo ora:minuti di oggi)
            tempo_arrivo = orario_corrente.replace(hour=tempo_arrivo.hour, minute=tempo_arrivo.minute, second=0, microsecond=0)

            # Se sono passati più di 60 minuti
            if orario_corrente - tempo_arrivo > timedelta(minutes=60):
                p.codice += 1  # oppure: p.codice = int(p.codice) + 1, se è una stringa

        def chiave_ordinamento(self, paziente):
             return (paziente.codice, paziente.tempo_arrivo)
    """
       def visualizza_pazienti_inordine(self):
          if not self.lista:
            print("Nessun paziente in attesa.")
          else:
            print("Pazienti in attesa (in ordine di priorità e orario):")
            ordinati = sorted(self.lista, key=self.chiave_ordinamento)
            for p in ordinati:
                print(f"- {p}")
    """


    paziente1=Paziente("Giulio",2)
    print(paziente1)
